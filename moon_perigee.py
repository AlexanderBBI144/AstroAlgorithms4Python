'''Meeus: Astronomical Algorithms (2nd ed.), chapter 50'''

import math

def _correctionsPeri(jd,k):
    T=(jd-2451545)/36525.
    
    D=math.radians(171.9179+335.9106046*k-0.0100383*T**2-0.00001156*T**3+0.000000055*T**4)
    M=math.radians(347.3477+27.1577721*k-0.0008130*T**2-0.0000010*T**3)
    F=math.radians(316.6109+364.5287911*k-0.0125053*T**2-0.0000148*T**3)
    
    args=[2*D,4*D,6*D,8*D,2*D-M,M,10*D,4*D-M,6*D-M,12*D,D,8*D-M,14*D,2*F,3*D,10*D-M,16*D,12*D-M,5*D,2*D+2*F,18*D,14*D-M,7*D,2*D+M,20*D,D+M,16*D-M,4*D+M,9*D,4*D+2*F,2*D-2*M,4*D-2*M,6*D-2*M,\
          22*D,18*D-M,6*D+M,11*D,8*D+M,4*D-2*F,6*D+2*F,3*D+M,5*D+M,13*D,20*D-M,3*D+2*M,4*D+2*F-2*M,D+2*M,22*D-M,4*F,6*D-2*F,2*D-2*F+M,2*M,2*F-M,2*D+4*F,2*F-2*M,2*D-2*F+2*M,24*D,4*D-4*F,2*D+2*M,D-M]
    coef=[-1.6769,0.4589,-0.1856,0.0883,-0.0773+0.00019*T,0.0502-0.00013*T,-0.0460,0.0422-0.00011*T,-0.0256,0.0253,0.0237,0.0162,-0.0145,0.0129,-0.0112,-0.0104,0.0086,0.0069,0.0066,-0.0053,\
        -0.0052,-0.0046,-0.0041,0.0040,0.0032,-0.0032,0.0031,-0.0029,0.0027,0.0027,-0.0027,0.0024,-0.0021,-0.0021,-0.0021,0.0019,-0.0018,-0.0014,-0.0014,-0.0014,0.0014,-0.0014,0.0013,0.0013,\
        0.0011,-0.0011,-0.0010,-0.0009,-0.0008,0.0008,0.0008,0.0007,0.0007,0.0007,-0.0006,-0.0006,0.0006,0.0005,0.0005,-0.0004]
    
    for i in range(len(args)): jd+=coef[i]*math.sin(args[i])
    return jd
    
def _correctionsApo(jd,k):
    T=(jd-2451545)/36525.
    
    D=math.radians(171.9179+335.9106046*k-0.0100383*T**2-0.00001156*T**3+0.000000055*T**4)
    M=math.radians(347.3477+27.1577721*k-0.0008130*T**2-0.0000010*T**3)
    F=math.radians(316.6109+364.5287911*k-0.0125053*T**2-0.0000148*T**3)
    
    args=[2*D,4*D,M,2*D-M,2*F,D,6*D,4*D-M,2*D+2*F,D+M,8*D,6*D-M,2*D-2*F,2*D-2*M,3*D,4*D+2*F,8*D-M,4*D-2*M,10*D,3*D+M,2*M,2*D+M,2*D+2*M,6*D+2*F,6*D-2*M,10*D-M,5*D,4*D-2*F,2*F+M,12*D,2*D+2*F-M,D-M]
    coef=[0.4392,0.0684,0.0456-0.00011*T,0.0426-0.00011*T,0.0212,-0.0189,0.0144,0.0113,0.0047,0.0036,0.0035,0.0034,-0.0034,0.0022,-0.0017,0.0013,0.0011,0.0010,0.0009,0.0007,0.0006,0.0005,0.0005,\
        0.0004,0.0004,0.0004,-0.0004,-0.0004,0.0003,0.0003,0.0003,-0.0003]
    
    for i in range(len(args)): jd+=coef[i]*math.sin(args[i])
    return jd

def calculate(jd,perigee=True,apogee=True):
    '''calculate times of Moon's perigee and apogee'''
    k=(jd-2451534.6698)/365.25*13.2555
    
    k0=k//1+1
    if k0-k>=0.5: k1=k0-0.5
    else: k1=k0+0.5
    
    out=()
    if perigee: 
        T=k0/1325.55
        jd0=2451534.6698+27.55454989*k0-0.0006691*T**2-0.000001098*T**3+0.0000000052*T**4
        out+=(_correctionsPeri(jd0,k0),)
    if apogee: 
        T=k1/1325.55
        jd0=2451534.6698+27.55454989*k1-0.0006691*T**2-0.000001098*T**3+0.0000000052*T**4
        out+=(_correctionsApo(jd0,k1),)
    if len(out)==1: out=out[0]
    
    return out
