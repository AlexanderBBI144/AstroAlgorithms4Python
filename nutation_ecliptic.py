'''Meeus: Astronomical Algorithms (2nd ed.), chapter 22'''   

import math

def nutation(jd):
    '''calculate nutation in longitude (psi) and obliquity (eps), in degrees'''
    T=(jd-2451545)/36525.
    
    D=math.radians(297.85036+445267.111480*T-0.0019142*T**2+T**3/189474.)
    M=math.radians(357.52772+35999.050340*T-0.0001603*T**2-T**3/300000.)
    M1=math.radians(134.96298+477198.867398*T+0.0086972*T**2+T**3/56250.)
    F=math.radians(93.27191+483202.017538*T-0.0036825*T**2+T**3/327270.)
    W=math.radians(125.04452-1934.136261*T+0.0020708*T**2+T**3/450000.)
    
    args=[[0,0,0,0,1],[-2,0,0,2,2],[0,0,0,2,2],[0,0,0,0,2],[0,1,0,0,0],[0,0,1,0,0],[-2,1,0,2,2],[0,0,0,2,1],[0,0,1,2,2],[-2,-1,0,2,2],[-2,0,1,0,0],[-2,0,0,2,1],[0,0,-1,2,2],[2,0,0,0,0],\
        [0,0,1,0,1],[2,0,-1,2,2],[0,0,-1,0,1],[0,0,1,2,1],[-2,0,2,0,0],[0,0,-2,2,1],[2,0,0,2,2],[0,0,2,2,2],[0,0,2,0,0],[-2,0,1,2,2],[0,0,0,2,0],[-2,0,0,2,0],[0,0,-1,2,1],[0,2,0,0,0],\
        [2,0,-1,0,1],[-2,2,0,2,2],[0,1,0,0,1],[-2,0,1,0,1],[0,-1,0,0,1],[0,0,2,-2,0],[2,0,-1,2,1],[2,0,1,2,2],[0,1,0,2,2],[-2,1,1,0,0],[0,-1,0,2,2],[2,0,0,2,1],[2,0,1,0,0],[-2,0,2,2,2],\
        [-2,0,1,2,1],[2,0,-2,0,1],[2,0,0,0,1],[0,-1,1,0,0],[-2,-1,0,2,1],[-2,0,0,0,1],[0,0,2,2,1],[-2,0,2,0,1],[-2,1,0,2,1],[0,0,1,-2,0],[-1,0,1,0,0],[-2,1,0,0,0],[1,0,0,0,0],[0,0,1,2,0],\
        [0,0,-2,2,2],[-1,-1,1,0,0],[0,1,1,0,0],[0,-1,1,2,2],[2,-1,-1,2,2],[0,0,3,2,2],[2,-1,0,2,2]]
    args1=[D,M,M1,F,W]
    sinC=[-171996-174.2*T,-13187-1.6*T,-2274-0.2*T,2062+0.2*T,1426-3.4*T,712+0.1*T,-517+1.2*T,-386-0.4*T,-301,217-0.5*T,-158,129+0.1*T,123,63,63+0.1*T,-59,-58-0.1*T,-51,48,46,-38,-31,29,29,26,\
        -22,21,17-0.1*T,16,-16+0.1*T,-15,-13,-12,11,-10,-8,7,-7,-7,-7,6,6,6,-6,-6,5,-5,-5,-5,4,4,4,-4,-4,-4,3,-3,-3,-3,-3,-3,-3,-3]
    cosC=[92025+8.9*T,5736-3.1*T,977-0.5*T,-895+0.5*T,54-0.1*T,-7,224-0.6*T,200,129-0.1*T,-95+0.3*T,0,-70,-53,0,-33,26,32,27,0,-24,16,13,0,-12,0,0,-10,0,-8,7,9,7,6,0,5,3,-3,0,3,3,0,-3,-3,3,3,0,\
        3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    
    psi=0
    eps=0
    for i in range(len(args)):
        tmp=0
        for j in range(len(args1)): tmp+=args[i][j]*args1[j]
        psi+=sinC[i]*math.sin(tmp)
        eps+=cosC[i]*math.cos(tmp)
        
    return psi/1e4/3600.,eps/1e4/3600.


def nutation1(jd):
    '''calculate nutation in longitude (psi) and obliquity (eps) with lower precision (0.5 arcsec), in degrees'''
    T=(jd-2451545)/36525.
    
    W=math.radians(125.04452-1934.136261*T+0.0020708*T**2+T**3/450000.)
    L=math.radians(280.4665+36000.7698*T)
    L1=math.radians(218.3165+481267.8813*T)
    
    psi=-17.2*math.sin(W)-1.32*math.sin(2*L)-0.23*math.sin(2*L1)+0.21*math.sin(2*W)
    eps=9.2*math.cos(W)+0.57*math.cos(2*L)+0.10*math.cos(2*L1)-0.09*math.cos(2*W)    
        
    return psi/3600.,eps/3600.


def ecliptic(jd):
    '''mean obliquity of ecliptic (without nutation)'''
    T=(jd-2451545)/36525.
    U=T/100.
    
    eps=23+26/60.+(21.448-4680.93*U-1.55*U**2+1999.25*U**3-51.38*U**4-249.67*U**5-39.05*U**6+7.12*U**7+27.87*U**8+5.79*U**9+2.45*U**10)/3600.
    
    return eps
    
    